//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppView.DirectorWSReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectorDTO", Namespace="http://schemas.datacontract.org/2004/07/AppService")]
    [System.SerializableAttribute()]
    public partial class DirectorDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DirectorNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DID {
            get {
                return this.DIDField;
            }
            set {
                if ((this.DIDField.Equals(value) != true)) {
                    this.DIDField = value;
                    this.RaisePropertyChanged("DID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DirectorName {
            get {
                return this.DirectorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectorNameField, value) != true)) {
                    this.DirectorNameField = value;
                    this.RaisePropertyChanged("DirectorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DirectorWSReference.IDirector")]
    public interface IDirector {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/GetAllDirector", ReplyAction="http://tempuri.org/IDirector/GetAllDirectorResponse")]
        AppView.DirectorWSReference.DirectorDTO[] GetAllDirector();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/GetAllDirector", ReplyAction="http://tempuri.org/IDirector/GetAllDirectorResponse")]
        System.Threading.Tasks.Task<AppView.DirectorWSReference.DirectorDTO[]> GetAllDirectorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorInserted", ReplyAction="http://tempuri.org/IDirector/IsDirectorInsertedResponse")]
        bool IsDirectorInserted(AppView.DirectorWSReference.DirectorDTO director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorInserted", ReplyAction="http://tempuri.org/IDirector/IsDirectorInsertedResponse")]
        System.Threading.Tasks.Task<bool> IsDirectorInsertedAsync(AppView.DirectorWSReference.DirectorDTO director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorUpdated", ReplyAction="http://tempuri.org/IDirector/IsDirectorUpdatedResponse")]
        bool IsDirectorUpdated(AppView.DirectorWSReference.DirectorDTO director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorUpdated", ReplyAction="http://tempuri.org/IDirector/IsDirectorUpdatedResponse")]
        System.Threading.Tasks.Task<bool> IsDirectorUpdatedAsync(AppView.DirectorWSReference.DirectorDTO director);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorDeleted", ReplyAction="http://tempuri.org/IDirector/IsDirectorDeletedResponse")]
        bool IsDirectorDeleted(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDirector/IsDirectorDeleted", ReplyAction="http://tempuri.org/IDirector/IsDirectorDeletedResponse")]
        System.Threading.Tasks.Task<bool> IsDirectorDeletedAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDirectorChannel : AppView.DirectorWSReference.IDirector, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectorClient : System.ServiceModel.ClientBase<AppView.DirectorWSReference.IDirector>, AppView.DirectorWSReference.IDirector {
        
        public DirectorClient() {
        }
        
        public DirectorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DirectorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DirectorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AppView.DirectorWSReference.DirectorDTO[] GetAllDirector() {
            return base.Channel.GetAllDirector();
        }
        
        public System.Threading.Tasks.Task<AppView.DirectorWSReference.DirectorDTO[]> GetAllDirectorAsync() {
            return base.Channel.GetAllDirectorAsync();
        }
        
        public bool IsDirectorInserted(AppView.DirectorWSReference.DirectorDTO director) {
            return base.Channel.IsDirectorInserted(director);
        }
        
        public System.Threading.Tasks.Task<bool> IsDirectorInsertedAsync(AppView.DirectorWSReference.DirectorDTO director) {
            return base.Channel.IsDirectorInsertedAsync(director);
        }
        
        public bool IsDirectorUpdated(AppView.DirectorWSReference.DirectorDTO director) {
            return base.Channel.IsDirectorUpdated(director);
        }
        
        public System.Threading.Tasks.Task<bool> IsDirectorUpdatedAsync(AppView.DirectorWSReference.DirectorDTO director) {
            return base.Channel.IsDirectorUpdatedAsync(director);
        }
        
        public bool IsDirectorDeleted(int ID) {
            return base.Channel.IsDirectorDeleted(ID);
        }
        
        public System.Threading.Tasks.Task<bool> IsDirectorDeletedAsync(int ID) {
            return base.Channel.IsDirectorDeletedAsync(ID);
        }
    }
}
