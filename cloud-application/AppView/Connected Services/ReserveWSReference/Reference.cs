//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppView.ReserveWSReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReserveDTO", Namespace="http://schemas.datacontract.org/2004/07/AppService")]
    [System.SerializableAttribute()]
    public partial class ReserveDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReserveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReserveDate {
            get {
                return this.ReserveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ReserveDateField, value) != true)) {
                    this.ReserveDateField = value;
                    this.RaisePropertyChanged("ReserveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReserveWSReference.IReserve")]
    public interface IReserve {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/GetReservedData", ReplyAction="http://tempuri.org/IReserve/GetReservedDataResponse")]
        System.Collections.Generic.KeyValuePair<int, int>[] GetReservedData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/GetReservedData", ReplyAction="http://tempuri.org/IReserve/GetReservedDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, int>[]> GetReservedDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/IsReservedInserted", ReplyAction="http://tempuri.org/IReserve/IsReservedInsertedResponse")]
        bool IsReservedInserted(int uID, int mediaID, string reservedDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/IsReservedInserted", ReplyAction="http://tempuri.org/IReserve/IsReservedInsertedResponse")]
        System.Threading.Tasks.Task<bool> IsReservedInsertedAsync(int uID, int mediaID, string reservedDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/IsReservedDeleted", ReplyAction="http://tempuri.org/IReserve/IsReservedDeletedResponse")]
        bool IsReservedDeleted(int mediaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/IsReservedDeleted", ReplyAction="http://tempuri.org/IReserve/IsReservedDeletedResponse")]
        System.Threading.Tasks.Task<bool> IsReservedDeletedAsync(int mediaID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/GetReservedInfo", ReplyAction="http://tempuri.org/IReserve/GetReservedInfoResponse")]
        AppView.ReserveWSReference.ReserveDTO[] GetReservedInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReserve/GetReservedInfo", ReplyAction="http://tempuri.org/IReserve/GetReservedInfoResponse")]
        System.Threading.Tasks.Task<AppView.ReserveWSReference.ReserveDTO[]> GetReservedInfoAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReserveChannel : AppView.ReserveWSReference.IReserve, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReserveClient : System.ServiceModel.ClientBase<AppView.ReserveWSReference.IReserve>, AppView.ReserveWSReference.IReserve {
        
        public ReserveClient() {
        }
        
        public ReserveClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReserveClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReserveClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReserveClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.KeyValuePair<int, int>[] GetReservedData() {
            return base.Channel.GetReservedData();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, int>[]> GetReservedDataAsync() {
            return base.Channel.GetReservedDataAsync();
        }
        
        public bool IsReservedInserted(int uID, int mediaID, string reservedDate) {
            return base.Channel.IsReservedInserted(uID, mediaID, reservedDate);
        }
        
        public System.Threading.Tasks.Task<bool> IsReservedInsertedAsync(int uID, int mediaID, string reservedDate) {
            return base.Channel.IsReservedInsertedAsync(uID, mediaID, reservedDate);
        }
        
        public bool IsReservedDeleted(int mediaID) {
            return base.Channel.IsReservedDeleted(mediaID);
        }
        
        public System.Threading.Tasks.Task<bool> IsReservedDeletedAsync(int mediaID) {
            return base.Channel.IsReservedDeletedAsync(mediaID);
        }
        
        public AppView.ReserveWSReference.ReserveDTO[] GetReservedInfo() {
            return base.Channel.GetReservedInfo();
        }
        
        public System.Threading.Tasks.Task<AppView.ReserveWSReference.ReserveDTO[]> GetReservedInfoAsync() {
            return base.Channel.GetReservedInfoAsync();
        }
    }
}
