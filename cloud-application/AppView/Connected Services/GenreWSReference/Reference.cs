//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppView.GenreWSReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenreDTO", Namespace="http://schemas.datacontract.org/2004/07/AppService")]
    [System.SerializableAttribute()]
    public partial class GenreDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GID {
            get {
                return this.GIDField;
            }
            set {
                if ((this.GIDField.Equals(value) != true)) {
                    this.GIDField = value;
                    this.RaisePropertyChanged("GID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenreName {
            get {
                return this.GenreNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreNameField, value) != true)) {
                    this.GenreNameField = value;
                    this.RaisePropertyChanged("GenreName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GenreWSReference.IGenre")]
    public interface IGenre {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/GetAllGenre", ReplyAction="http://tempuri.org/IGenre/GetAllGenreResponse")]
        AppView.GenreWSReference.GenreDTO[] GetAllGenre();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/GetAllGenre", ReplyAction="http://tempuri.org/IGenre/GetAllGenreResponse")]
        System.Threading.Tasks.Task<AppView.GenreWSReference.GenreDTO[]> GetAllGenreAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreInserted", ReplyAction="http://tempuri.org/IGenre/IsGenreInsertedResponse")]
        bool IsGenreInserted(AppView.GenreWSReference.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreInserted", ReplyAction="http://tempuri.org/IGenre/IsGenreInsertedResponse")]
        System.Threading.Tasks.Task<bool> IsGenreInsertedAsync(AppView.GenreWSReference.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreUpdated", ReplyAction="http://tempuri.org/IGenre/IsGenreUpdatedResponse")]
        bool IsGenreUpdated(AppView.GenreWSReference.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreUpdated", ReplyAction="http://tempuri.org/IGenre/IsGenreUpdatedResponse")]
        System.Threading.Tasks.Task<bool> IsGenreUpdatedAsync(AppView.GenreWSReference.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreDeleted", ReplyAction="http://tempuri.org/IGenre/IsGenreDeletedResponse")]
        bool IsGenreDeleted(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenre/IsGenreDeleted", ReplyAction="http://tempuri.org/IGenre/IsGenreDeletedResponse")]
        System.Threading.Tasks.Task<bool> IsGenreDeletedAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGenreChannel : AppView.GenreWSReference.IGenre, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenreClient : System.ServiceModel.ClientBase<AppView.GenreWSReference.IGenre>, AppView.GenreWSReference.IGenre {
        
        public GenreClient() {
        }
        
        public GenreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GenreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GenreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AppView.GenreWSReference.GenreDTO[] GetAllGenre() {
            return base.Channel.GetAllGenre();
        }
        
        public System.Threading.Tasks.Task<AppView.GenreWSReference.GenreDTO[]> GetAllGenreAsync() {
            return base.Channel.GetAllGenreAsync();
        }
        
        public bool IsGenreInserted(AppView.GenreWSReference.GenreDTO genre) {
            return base.Channel.IsGenreInserted(genre);
        }
        
        public System.Threading.Tasks.Task<bool> IsGenreInsertedAsync(AppView.GenreWSReference.GenreDTO genre) {
            return base.Channel.IsGenreInsertedAsync(genre);
        }
        
        public bool IsGenreUpdated(AppView.GenreWSReference.GenreDTO genre) {
            return base.Channel.IsGenreUpdated(genre);
        }
        
        public System.Threading.Tasks.Task<bool> IsGenreUpdatedAsync(AppView.GenreWSReference.GenreDTO genre) {
            return base.Channel.IsGenreUpdatedAsync(genre);
        }
        
        public bool IsGenreDeleted(int ID) {
            return base.Channel.IsGenreDeleted(ID);
        }
        
        public System.Threading.Tasks.Task<bool> IsGenreDeletedAsync(int ID) {
            return base.Channel.IsGenreDeletedAsync(ID);
        }
    }
}
